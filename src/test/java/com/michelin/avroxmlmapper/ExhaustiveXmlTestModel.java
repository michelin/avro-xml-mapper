/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.michelin.avroxmlmapper;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class ExhaustiveXmlTestModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 5108064317782662199L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ExhaustiveXMLTestModel\",\"namespace\":\"com.michelin.avroxmlmapper\",\"fields\":[{\"name\":\"date1\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"xpath\":\"ns1:Date1\"},{\"name\":\"date2\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"xpath\":\"ns1:Date2\"},{\"name\":\"date3\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"xpath\":\"ns1:Date3\"},{\"name\":\"date4\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"xpath\":\"ns1:Date4\"},{\"name\":\"date5\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"xpath\":\"ns1:Date5\"}],\"xmlNamespaces\":{\"null\":\"toto\",\"ns1\":\"toto2\"},\"xpath\":\"/TestPayload\"}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    private static SpecificData MODEL$ = new SpecificData();
    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    }

    private static final BinaryMessageEncoder<ExhaustiveXmlTestModel> ENCODER =
            new BinaryMessageEncoder<ExhaustiveXmlTestModel>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<ExhaustiveXmlTestModel> DECODER =
            new BinaryMessageDecoder<ExhaustiveXmlTestModel>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<ExhaustiveXmlTestModel> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<ExhaustiveXmlTestModel> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<ExhaustiveXmlTestModel> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<ExhaustiveXmlTestModel>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this ExhaustiveXMLTestModel to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a ExhaustiveXMLTestModel from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a ExhaustiveXMLTestModel instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static ExhaustiveXmlTestModel fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    @Deprecated public java.time.Instant date1;
    @Deprecated public java.time.Instant date2;
    @Deprecated public java.time.Instant date3;
    @Deprecated public java.time.Instant date4;
    @Deprecated public java.time.Instant date5;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public ExhaustiveXmlTestModel() {}

    /**
     * All-args constructor.
     * @param date1 The new value for date1
     * @param date2 The new value for date2
     * @param date3 The new value for date3
     * @param date4 The new value for date4
     * @param date5 The new value for date5
     */
    public ExhaustiveXmlTestModel(java.time.Instant date1, java.time.Instant date2, java.time.Instant date3, java.time.Instant date4, java.time.Instant date5) {
        this.date1 = date1;
        this.date2 = date2;
        this.date3 = date3;
        this.date4 = date4;
        this.date5 = date5;
    }

    public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return date1;
            case 1: return date2;
            case 2: return date3;
            case 3: return date4;
            case 4: return date5;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: date1 = (java.time.Instant)value$; break;
            case 1: date2 = (java.time.Instant)value$; break;
            case 2: date3 = (java.time.Instant)value$; break;
            case 3: date4 = (java.time.Instant)value$; break;
            case 4: date5 = (java.time.Instant)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'date1' field.
     * @return The value of the 'date1' field.
     */
    public java.time.Instant getDate1() {
        return date1;
    }


    /**
     * Sets the value of the 'date1' field.
     * @param value the value to set.
     */
    public void setDate1(java.time.Instant value) {
        this.date1 = value;
    }

    /**
     * Gets the value of the 'date2' field.
     * @return The value of the 'date2' field.
     */
    public java.time.Instant getDate2() {
        return date2;
    }


    /**
     * Sets the value of the 'date2' field.
     * @param value the value to set.
     */
    public void setDate2(java.time.Instant value) {
        this.date2 = value;
    }

    /**
     * Gets the value of the 'date3' field.
     * @return The value of the 'date3' field.
     */
    public java.time.Instant getDate3() {
        return date3;
    }


    /**
     * Sets the value of the 'date3' field.
     * @param value the value to set.
     */
    public void setDate3(java.time.Instant value) {
        this.date3 = value;
    }

    /**
     * Gets the value of the 'date4' field.
     * @return The value of the 'date4' field.
     */
    public java.time.Instant getDate4() {
        return date4;
    }


    /**
     * Sets the value of the 'date4' field.
     * @param value the value to set.
     */
    public void setDate4(java.time.Instant value) {
        this.date4 = value;
    }

    /**
     * Gets the value of the 'date5' field.
     * @return The value of the 'date5' field.
     */
    public java.time.Instant getDate5() {
        return date5;
    }


    /**
     * Sets the value of the 'date5' field.
     * @param value the value to set.
     */
    public void setDate5(java.time.Instant value) {
        this.date5 = value;
    }

    /**
     * Creates a new ExhaustiveXMLTestModel RecordBuilder.
     * @return A new ExhaustiveXMLTestModel RecordBuilder
     */
    public static ExhaustiveXmlTestModel.Builder newBuilder() {
        return new ExhaustiveXmlTestModel.Builder();
    }

    /**
     * Creates a new ExhaustiveXMLTestModel RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new ExhaustiveXMLTestModel RecordBuilder
     */
    public static ExhaustiveXmlTestModel.Builder newBuilder(ExhaustiveXmlTestModel.Builder other) {
        if (other == null) {
            return new ExhaustiveXmlTestModel.Builder();
        } else {
            return new ExhaustiveXmlTestModel.Builder(other);
        }
    }

    /**
     * Creates a new ExhaustiveXMLTestModel RecordBuilder by copying an existing ExhaustiveXMLTestModel instance.
     * @param other The existing instance to copy.
     * @return A new ExhaustiveXMLTestModel RecordBuilder
     */
    public static ExhaustiveXmlTestModel.Builder newBuilder(ExhaustiveXmlTestModel other) {
        if (other == null) {
            return new ExhaustiveXmlTestModel.Builder();
        } else {
            return new ExhaustiveXmlTestModel.Builder(other);
        }
    }

    /**
     * RecordBuilder for ExhaustiveXMLTestModel instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ExhaustiveXmlTestModel>
            implements org.apache.avro.data.RecordBuilder<ExhaustiveXmlTestModel> {

        private java.time.Instant date1;
        private java.time.Instant date2;
        private java.time.Instant date3;
        private java.time.Instant date4;
        private java.time.Instant date5;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(ExhaustiveXmlTestModel.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.date1)) {
                this.date1 = data().deepCopy(fields()[0].schema(), other.date1);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.date2)) {
                this.date2 = data().deepCopy(fields()[1].schema(), other.date2);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.date3)) {
                this.date3 = data().deepCopy(fields()[2].schema(), other.date3);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.date4)) {
                this.date4 = data().deepCopy(fields()[3].schema(), other.date4);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.date5)) {
                this.date5 = data().deepCopy(fields()[4].schema(), other.date5);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
        }

        /**
         * Creates a Builder by copying an existing ExhaustiveXMLTestModel instance
         * @param other The existing instance to copy.
         */
        private Builder(ExhaustiveXmlTestModel other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.date1)) {
                this.date1 = data().deepCopy(fields()[0].schema(), other.date1);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.date2)) {
                this.date2 = data().deepCopy(fields()[1].schema(), other.date2);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.date3)) {
                this.date3 = data().deepCopy(fields()[2].schema(), other.date3);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.date4)) {
                this.date4 = data().deepCopy(fields()[3].schema(), other.date4);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.date5)) {
                this.date5 = data().deepCopy(fields()[4].schema(), other.date5);
                fieldSetFlags()[4] = true;
            }
        }

        /**
         * Gets the value of the 'date1' field.
         * @return The value.
         */
        public java.time.Instant getDate1() {
            return date1;
        }


        /**
         * Sets the value of the 'date1' field.
         * @param value The value of 'date1'.
         * @return This builder.
         */
        public ExhaustiveXmlTestModel.Builder setDate1(java.time.Instant value) {
            validate(fields()[0], value);
            this.date1 = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'date1' field has been set.
         * @return True if the 'date1' field has been set, false otherwise.
         */
        public boolean hasDate1() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'date1' field.
         * @return This builder.
         */
        public ExhaustiveXmlTestModel.Builder clearDate1() {
            date1 = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'date2' field.
         * @return The value.
         */
        public java.time.Instant getDate2() {
            return date2;
        }


        /**
         * Sets the value of the 'date2' field.
         * @param value The value of 'date2'.
         * @return This builder.
         */
        public ExhaustiveXmlTestModel.Builder setDate2(java.time.Instant value) {
            validate(fields()[1], value);
            this.date2 = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'date2' field has been set.
         * @return True if the 'date2' field has been set, false otherwise.
         */
        public boolean hasDate2() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'date2' field.
         * @return This builder.
         */
        public ExhaustiveXmlTestModel.Builder clearDate2() {
            date2 = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'date3' field.
         * @return The value.
         */
        public java.time.Instant getDate3() {
            return date3;
        }


        /**
         * Sets the value of the 'date3' field.
         * @param value The value of 'date3'.
         * @return This builder.
         */
        public ExhaustiveXmlTestModel.Builder setDate3(java.time.Instant value) {
            validate(fields()[2], value);
            this.date3 = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'date3' field has been set.
         * @return True if the 'date3' field has been set, false otherwise.
         */
        public boolean hasDate3() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'date3' field.
         * @return This builder.
         */
        public ExhaustiveXmlTestModel.Builder clearDate3() {
            date3 = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'date4' field.
         * @return The value.
         */
        public java.time.Instant getDate4() {
            return date4;
        }


        /**
         * Sets the value of the 'date4' field.
         * @param value The value of 'date4'.
         * @return This builder.
         */
        public ExhaustiveXmlTestModel.Builder setDate4(java.time.Instant value) {
            validate(fields()[3], value);
            this.date4 = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'date4' field has been set.
         * @return True if the 'date4' field has been set, false otherwise.
         */
        public boolean hasDate4() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'date4' field.
         * @return This builder.
         */
        public ExhaustiveXmlTestModel.Builder clearDate4() {
            date4 = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'date5' field.
         * @return The value.
         */
        public java.time.Instant getDate5() {
            return date5;
        }


        /**
         * Sets the value of the 'date5' field.
         * @param value The value of 'date5'.
         * @return This builder.
         */
        public ExhaustiveXmlTestModel.Builder setDate5(java.time.Instant value) {
            validate(fields()[4], value);
            this.date5 = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'date5' field has been set.
         * @return True if the 'date5' field has been set, false otherwise.
         */
        public boolean hasDate5() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'date5' field.
         * @return This builder.
         */
        public ExhaustiveXmlTestModel.Builder clearDate5() {
            date5 = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public ExhaustiveXmlTestModel build() {
            try {
                ExhaustiveXmlTestModel record = new ExhaustiveXmlTestModel();
                record.date1 = fieldSetFlags()[0] ? this.date1 : (java.time.Instant) defaultValue(fields()[0]);
                record.date2 = fieldSetFlags()[1] ? this.date2 : (java.time.Instant) defaultValue(fields()[1]);
                record.date3 = fieldSetFlags()[2] ? this.date3 : (java.time.Instant) defaultValue(fields()[2]);
                record.date4 = fieldSetFlags()[3] ? this.date4 : (java.time.Instant) defaultValue(fields()[3]);
                record.date5 = fieldSetFlags()[4] ? this.date5 : (java.time.Instant) defaultValue(fields()[4]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<ExhaustiveXmlTestModel>
            WRITER$ = (org.apache.avro.io.DatumWriter<ExhaustiveXmlTestModel>)MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<ExhaustiveXmlTestModel>
            READER$ = (org.apache.avro.io.DatumReader<ExhaustiveXmlTestModel>)MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}










